%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.15.6 (Build 19G2021) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 717 228
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 717 228
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
q
0 0 717 228 rc
133 0 0 133 4 38 cm
BI
/Width 399
/Height 399
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/Interpolate true
/DataSource cg_aiproc
ID
JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$
JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$
JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$
JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$
JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"
JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$
JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$
JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$
JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$
JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"
JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$
JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$
JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$
JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$
JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"
JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$
JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$
JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$
JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$
JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"
JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$
JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$
JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$
JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$
JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"
JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$
JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$
JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$
JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$
JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"
JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$
JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$
JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$
JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$
JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"
JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$
JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$
JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$
JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$
JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"
JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$
JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$
JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$
JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$
JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"
JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$
JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$
JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$
JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$
JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"
JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$
JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$
JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$
JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$
JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"
JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$
JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$
JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$
JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$
JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"
JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$
JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$
JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$
JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$
JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"
JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$
JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$
JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$
JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$
JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"
JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$
JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$
JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$
JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$
JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"
JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$
JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$
JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$
JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$
JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"
JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$
JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$
JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$
JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$
JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"
JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$
JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$
JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$
JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$
JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"
JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$
JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$
JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$
JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$
JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"
JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$
JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$
JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$
JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$
JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"
JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$
JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$
JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$
JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$
JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"
JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$
JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$
JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$
JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$
JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"
JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$
JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$
JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$
JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$
JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"
JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$
JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$
JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$
JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$
JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"
JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$
JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$
JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$
JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$
JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"JcC<$JcC<$JcC<$JcC<$JcF7"J,
~> %APLeod
EI
Q
0.60000002 i
0.89826602 1 0.98046708 sc
q
6.9499035 87 m
5.6505938 92.856422 l
5 97.586662 l
6.9220018 97.714798 l
8.4944267 97.819389 10.030902 98.231613 11.443965 98.927383 c
14.350845 100.35879 l
15.486232 100.91787 16.553474 101.60481 17.531645 102.40652 c
25.298798 108.77093 l
36.21563 119.60797 l
43.352577 126.29819 l
43.352577 126.29819 47.491428 129.35548 49.080753 129.9603 c
49.643887 130.17458 50.891953 130.24974 51.484867 130.14166 c
53.274067 129.81505 58.075314 127.067 58.075314 127.067 c
62.356895 125.06876 l
63.854198 124.4428 64.821907 124.81517 66.017387 125.13992 c
67.163239 125.45102 68.251678 125.94296 69.241386 126.59727 c
70.406548 127.36768 l
72.609451 128.82396 74.699936 130.44261 76.660301 132.21027 c
79.910049 135.14049 l
84.886757 139.17201 l
85.582428 139.56335 86.336578 139.79341 87.120781 139.91138 c
89.70491 140.3006 92.313721 139.38361 94.251556 137.63521 c
95.9879 136.06871 98.274773 133.93806 99.50943 132.51094 c
107.82362 122.90146 l
116.83615 113.06754 l
123.6804 106.50251 l
130.21048 101.83781 l
137 99.250259 l
134.15617 87.930641 l
124.5424 91.028847 l
117.20665 94.686134 l
110.03725 98.509544 l
96.956413 106.78579 l
86.584473 111.53155 l
82.082901 112.69518 l
76.580887 113.78338 l
71 113.08306 l
66.577301 111.03292 l
60.4086 107.87426 l
55.573547 105.71338 l
47.605984 107.34487 l
44.569523 107.98528 l
41.06839 106.71062 l
37.400379 102.11146 l
29.953295 96.531906 l
25.298798 92.247589 l
18.727129 89.353218 l
13.169581 87.686943 l
6.9499035 87 l
W*
0 0 717 228 rc
0 145 m
142 145 l
142 82 l
0 82 l
h
f
Q
0.67124617 1 0.93897384 sc
q
7 87.406311 m
7 87.406311 l
7 87.406311 12.765821 88.005188 14.63409 88.493004 c
16.004065 88.850609 19.085304 90.100273 20.971226 90.886833 c
22.000978 91.316345 22.970821 91.874687 23.868177 92.552406 c
29.771479 97.010231 l
37.119377 103.77971 l
37.386311 104.02542 37.637733 104.28918 37.872036 104.56877 c
40.49617 107.70113 l
40.49617 107.70113 42.81646 110.14188 44.590313 109.57827 c
44.590847 109.57827 l
47.210167 108.52767 l
48.301708 108.08983 49.437111 107.78053 50.595249 107.60534 c
52.540817 107.31104 l
53.071476 107.2308 53.608818 107.20859 54.144024 107.24524 c
56.273609 107.39128 58.347294 108.01459 60.222248 109.0724 c
64.352501 111.40293 l
67.858749 113.13847 l
68.962059 113.68459 70.117523 114.10911 71.305885 114.4048 c
71.973488 114.57083 l
73.556099 114.96453 75.190063 115.08863 76.811188 114.93787 c
80.514565 114.59332 l
81.392395 114.5117 82.260063 114.33706 83.103661 114.07163 c
85.460327 113.3306 l
86.664467 112.95218 87.826088 112.44131 88.925919 111.80663 c
103.7961 103.22581 l
112.9791 97.681297 l
121.40758 92.878914 l
122.03666 92.520477 122.68822 92.205635 123.35769 91.9366 c
134 87.659241 l
131.45023 77 l
122.27605 79.171715 l
112.81033 83.750595 l
101.64432 89.135742 l
96.45195 91.143929 l
91.948845 90.571434 l
84.787376 88.665138 l
80.231316 87.375771 l
68.605789 91.763908 l
59.836559 96.082634 l
55.785748 96.082634 l
48.066067 93.57663 l
35.429512 85.849289 l
24.40151 79.5532 l
15.598314 77.975914 l
10.48057 77 l
7 87.406311 l
W*
0 0 717 228 rc
2 120 m
139 120 l
139 72 l
2 72 l
h
f
Q
0.34280017 0.995471 0.87328148 sc
q
11 79.672859 m
13.611515 79.672859 l
13.913284 79.672859 15.612568 79.688255 15.900487 79.779839 c
15.900487 79.779839 23.198614 81.836334 25.469208 82.804878 c
28.837675 84.241615 38.352596 89.807816 38.352596 89.807816 c
48.974712 96.019714 l
49.136913 96.11454 49.307377 96.193695 49.48423 96.255836 c
49.48423 96.255836 51.554264 97.543167 53.925003 97.895462 c
56.213444 98.235603 58.802319 97.642593 58.971714 97.575592 c
69.441483 93.426132 l
76.305466 90.524025 l
77.574333 90.126343 l
78.922043 89.704071 80.336067 89.543053 81.742638 89.65139 c
81.742638 89.65139 83.604927 89.839691 83.879524 89.949112 c
89.436821 92.157166 l
92.589546 92.730728 l
93.961227 92.980087 95.363533 93.00386 96.742668 92.800697 c
98.148178 92.594025 l
99.536629 92.389511 100.88248 91.953461 102.13057 91.303177 c
109.71874 87.349319 l
109.71874 87.349319 117.4987 83.390862 120.19091 82.301559 c
122.83119 81.23333 131 78.723228 131 78.723228 c
125.65019 69.537361 l
116.34435 70.299225 l
106.9642 72.984116 l
97.401077 76.102089 l
89.289528 77.487762 l
80.324348 78.094017 l
71.871346 78.723228 l
58.892876 77.31459 l
38.741993 72.377869 l
28.325228 69 l
14.663579 69 l
11 79.672859 l
W*
0 0 717 228 rc
6 103 m
136 103 l
136 64 l
6 64 l
h
f
Q
0.098720118 0.957286 0.79431748 sc
q
17 69.218697 m
17 69.218697 23.919617 68.963669 26.207796 69.218697 c
29.107456 69.541603 37.596287 71.787888 37.596287 71.787888 c
54.235184 75.936714 l
54.617794 76.031914 55.003078 76.116562 55.390503 76.190392 c
64.411942 77.906609 l
65.296944 78.074821 66.190773 78.193001 67.088875 78.260612 c
76.09668 78.936989 l
77.331673 79.029747 78.572289 79.020012 79.805679 78.908318 c
87.259239 78.232758 l
88.172852 78.150002 89.080849 78.012894 89.978424 77.82196 c
100.13406 75.662491 l
101.29151 75.416389 102.42438 75.091591 103.53691 74.686195 c
106.23364 73.703957 111.53699 71.805466 113.75351 71.248085 c
116.7644 70.490852 126 69.218697 126 69.218697 c
121.94341 63.038582 l
117.43363 58 l
24.401155 58 l
17 69.218697 l
W*
0 0 717 228 rc
12 84 m
131 84 l
131 53 l
12 53 l
h
f
Q
0 0.84836388 0.68547803 sc
q
25 58 m
116 58 l
110.50887 51.653801 l
101.18687 45.550461 l
87.727028 40.140217 l
75.494408 38 l
56.79985 39.265179 l
41.73164 44.540051 l
25.250019 56.188465 l
25 58 l
W*
0 0 717 228 rc
20 63 m
121 63 l
121 33 l
20 33 l
h
f
Q
q
133.5 104.5 m
133.5 69.705986 105.29401 41.5 70.5 41.5 c
35.70599 41.5 7.5 69.705986 7.5 104.5 c
7.5 139.29401 35.70599 167.5 70.5 167.5 c
105.29401 167.5 133.5 139.29401 133.5 104.5 c
h
140.5 104.5 m
140.5 143.16 109.16 174.5 70.5 174.5 c
31.839996 174.5 0.5 143.16 0.5 104.5 c
0.5 65.839996 31.839996 34.5 70.5 34.5 c
109.16 34.5 140.5 65.839996 140.5 104.5 c
h
W
0 0 717 228 rc
1 0 0 -1 4 171 cm
15 dict begin
/ShadingType 2 def
/Cs1 /ColorSpace fr
/ColorSpace xd
/Coords [25.145767 92.965347 66.5 16.194397] def
/Domain [0 1] def
/Extend [true true] def
15 dict begin
/FunctionType 0 def
/BitsPerSample 8 def
/Size [ 256 ] def
/Domain [ 0 1 ] def
/Range [ 0 1 0 1 0 1 0 1 ] def
/DataSource <~
iJNNmi/<KmhMdBmh2I9lgPq0lg5_-lfT2$lf8u!leW>gke<,dkdZT[kd?BXkc]jOkcBOFjba"=jbEe:j
ad8.iaI&.j`gDqh`L2qi_jZeh_OHei^mgSg^RUSh]q(Gg]UkGh\t>;g\Y#5g\"K)f[\9)g[%`rfZ_Nrg
Z(m`eYb[]eY,.TeXeqQeX/DHeWi)?dW2Q6dVl?3dV5g*dUoU'dU8smcTrajcT<4acT!"^cS?JUcS$/Lb
RBW@aR'E@bQEm4aQ*[4bPI%"`P-h"aOL:k`O1(kaNOP_`N45Y`MR]M_M7KM`LUsA_L:X;_KY+/^K=n/_
J\A#^JA.u^I_Mf]ID;c]HbcZ]HGQW]Gf$N]GJ^E\Fi1<\FMt9\ElG0\EQ5-\DoSs[DTAp[Crig[CWWd[
C!*XZBZdRZB$7FYA^%FZA'M:Y@a;:Z@*Z(X?dH(Y?-oqX>g]qY>LKnY=jj_X=OX\X<n+SX<RnPX;q8AW
;V&>W:tN2V:Y<2W:"d&V9\HuV9%piU8_^iV8DC`U8)1]U7bkWU7GYTU7,>KT6f,KU6JoHU6/T?T5iB<T
5N'6T52j3T4lO*S4Q=*T46"!S3odsS3TImS397jS2rqaR2W_aS2<DXR2!2UR1ZuUS1?ZLR1$HIR0^-CR
0Bg:Q0Bp@R0Bp@R0Bp@R0Bp@R0Bp@R0Bp@R0'U7Q0'U7Q0'U7Q0'U7Q0'U7Q0'U7Q0'U7Q0'U7Q/aC4Q
/aC4Q/aC4Q/aC4Q/aC7R/aC7R/aC7R/F(.Q/F(.Q/F(.Q/F(.Q/F(.Q/F(.Q/F(.Q/F14R/*k+Q/*k+Q
/*k+Q/*k+Q/*k+Q/*k+Q/F(.Q0'U7Q0^-CR1$?CQ1ZlOR2<M^S2W_aS2rqaR3TImS3odsS46"!S4lO-T
52j3T5N'6T6/T?T6JoHU6f,HT7GYTU7bt]V8)1]U8DC`U9%piU9A6rV9\HuV:>!)V:Y<2W:tN2V;V&>W
;qAGX<7SGW<n+SX=4=SW=OX\X=jj_X>LBhX>g]qY?-oqX?dH(Y@*c.Y@Eu1YA'M=ZABhCZA^%FZB?ROZ
B$7FYAB_=Y@a24Y@*c.Y?I6%Y>g]qY>10eX=OX\X<n+SX<7SGW;V&>W:tN5W:"ZuU9A6rV8_^iV8)1]U
7GYTU6f,KU6/T?T5N'6T4lO*S46"!S3TImS2s%gS2<M^S1ZuUS0^-@Q0'U7Q/F(.Q.dP"P.."nP-LJeP
,jrYO,4NVP+S!MP*qIAO*:q8O)YD/O)"l#N(A>oN'DKZL&bsQL&,FHL%K"BL$iJ9L$2r0L#QE$K"olpK

~> def currentdict end
/Function exch def currentdict end sh
Q
q
184.828 38 m
184.828 168.269 l
154.034 168.269 l
154.034 38 l
184.828 38 l
h
233.787 35.924 m
248.838 35.924 257.66101 42.671001 262.505 52.013 c
262.505 38 l
293.47198 38 l
293.47198 128.479 l
262.505 128.479 l
262.505 76.405998 l
262.505 64.815002 256.45001 59.278999 247.108 59.278999 c
238.285 59.278999 234.306 64.295998 234.306 74.502998 c
234.306 128.479 l
203.339 128.479 l
203.339 69.486 l
203.339 46.650002 216.314 35.924 233.787 35.924 c
h
354.54099 35.924 m
383.77802 35.924 399.17499 50.801998 400.04001 73.638 c
372.18701 73.638 l
371.14899 63.777 365.09399 58.587002 356.444 58.587002 c
344.67999 58.587002 338.625 66.718002 338.625 82.460999 c
338.625 83.845001 l
338.625 99.069 345.026 106.854 355.92499 106.854 c
364.92099 106.854 369.073 102.183 370.457 93.706001 c
399.521 93.706001 l
397.79099 121.213 377.37701 130.901 355.233 130.901 c
328.591 130.901 306.966 113.601 306.966 83.499001 c
306.966 82.114998 l
306.966 51.667 327.55301 35.924 354.54099 35.924 c
h
428.931 137.129 m
438.61899 137.129 446.05801 143.87601 446.05801 153.045 c
446.05801 162.214 438.61899 169.134 428.931 169.134 c
419.24301 169.134 411.97699 162.214 411.97699 153.045 c
411.97699 143.87601 419.24301 137.129 428.931 137.129 c
h
444.50101 38 m
444.50101 128.479 l
413.534 128.479 l
413.534 38 l
444.50101 38 l
h
497.26599 35.924 m
510.93301 35.924 520.96698 43.362999 525.46503 52.705002 c
525.46503 38 l
556.43201 38 l
556.43201 168.269 l
525.46503 168.269 l
525.46503 115.677 l
520.27502 124.846 511.798 130.901 497.612 130.901 c
476.16 130.901 459.20599 114.466 459.20599 83.671997 c
459.20599 82.288002 l
459.20599 50.974998 476.33301 35.924 497.26599 35.924 c
h
508.16501 59.625 m
497.439 59.625 490.69199 67.410004 490.69199 82.634003 c
490.69199 84.017998 l
490.69199 99.761002 496.92001 107.546 508.51099 107.546 c
519.92902 107.546 526.33002 99.415001 526.33002 84.191002 c
526.33002 82.806999 l
526.33002 67.410004 519.40997 59.625 508.16501 59.625 c
h
591.03198 137.129 m
600.71997 137.129 608.159 143.87601 608.159 153.045 c
608.159 162.214 600.71997 169.134 591.03198 169.134 c
581.34399 169.134 574.078 162.214 574.078 153.045 c
574.078 143.87601 581.34399 137.129 591.03198 137.129 c
h
606.60199 38 m
606.60199 128.479 l
575.63501 128.479 l
575.63501 38 l
606.60199 38 l
h
651.23602 35.924 m
665.76801 35.924 673.72601 41.979 678.05103 48.553001 c
678.05103 38 l
708.15302 38 l
708.15302 96.647003 l
708.15302 120.694 692.237 130.901 667.32501 130.901 c
642.586 130.901 625.45898 120.175 624.07501 98.376999 c
653.13898 98.376999 l
653.83099 104.086 656.94501 109.103 665.422 109.103 c
675.28302 109.103 677.35901 103.394 677.35901 94.744003 c
677.35901 92.667999 l
668.70898 92.667999 l
638.60699 92.667999 620.61499 84.363998 620.61499 63.084999 c
620.61499 43.882 634.974 35.924 651.23602 35.924 c
h
661.96198 56.856998 m
654.69598 56.856998 651.23602 60.144001 651.23602 65.334 c
651.23602 72.773003 656.77197 75.195 669.22803 75.195 c
677.35901 75.195 l
677.35901 69.658997 l
677.35901 61.874001 670.78497 56.856998 661.96198 56.856998 c
h
W
0 0 717 228 rc
1 0 0 -1 144 228 cm
15 dict begin
/ShadingType 2 def
/Cs1 /ColorSpace fr
/ColorSpace xd
/Coords [286.5 133.00549 286.5 228] def
/Domain [0 1] def
/Extend [true true] def
15 dict begin
/FunctionType 0 def
/BitsPerSample 8 def
/Size [ 256 ] def
/Domain [ 0 1 ] def
/Range [ 0 1 0 1 0 1 0 1 ] def
/DataSource <~
iJNNmiJNNmiJNNmiJNNmiJNNmiJEEkie`Nlie`Nlie`Nlie`Nlie`Nlie`Nlie`Nlie`NlieWEjieWEj
ieWEjieWEjj+rNkj+rNkj+rNkj+rNkj+iEij+iEij+iEij+iEij+iEij+iEij+iEij+iEijG/NjjG&Eh
jG&EhjG&EhjG&EhjG&EhjG&EhjG&EhjG&EhjG&EhjFr<fjb8Egjb8Egjb8Egjb8Egjb8Egjb8Egjb8Eg
jb8Egjb/<ejb/<ejb/<ejb/<ek(JEfk(JEfk(JEfk(JEfk(A<dk(A<dk(A<dk(A<dk(A<dk(A<dk(A<d
k(A<dkC\EekCS<ckCS<ckCS<ckCS<ckCS<ckCS<ckCS<ckCS<ckCS<ckCJ3ak^e<bk^e<bk^e<bk^e<b
k^e<bk^e<bk^e<bk^e<bk^\3`k^\3`k^\3`k^\3`l%"<al%"<al%"<al%"<al$n3_l$n3_l$n3_l$n3_
l$n3_l$n3_l$n3_l$n3_l@4<`l@+3^l@+3^l@+3^l@+3^l@+3^l@+3^l@+3^l@+3^l@+3^l@"*\l[=3]
l[=3]l[=3]l[=3]l[=3]l[=3]l[=3]l[4*[l[4*[l[4*[l[4*[l[4*[m!O3\m!O3\m!O3\m!O3\m!F*Z
m!F*Zm!F*Zm!F*Zm!F*Zm!F*Zm!F*Zm!F*Zm<a3[m<X*Ym<X*Ym<X*Ym<X*Ym<X*Ym<X*Ym<X*Ym<X*Y
m<X*Ym<O!WmWj*XmWj*XmWj*XmWj*XmWj*XmWj*XmWj*XmWa!VmWa!VmWa!VmWa!VmWa!Vms'*Wms'*W
ms'*Wms'*Wmrs!Umrs!Umrs!Umrs!Umrs!Umrs!Umrs!Umrs!Un99*Vn90!Tn90!Tn90!Tn90!Tn90!T
n90!Tn90!Tn90!Tn90!Tn9&mRnTB!SnTB!SnTB!SnTB!SnTB!SnTB!SnTB!SnT8mQnT8mQnT8mQnT8mQ
nT8mQnoT!RnoT!RnoT!RnoT!RnoJmPnoJmPnoJmPnoJmPnoJmPnoJmPnoJmPnoJmPo5f!Qo5\mOo5\mO
o5\mOo5\mOo5\mOo5\mOo5\mOo5\mOo5\mOo5SdMoPnmNoPnmNoPnmNoPnmNoPnmNoPnmNoPnmNoPedL
oPedLoPedLoPedLoPedLol+mMol+mMol+mMol+mMol"dKol"dKol"dKol"dKol"dKol"dKol"dKol"dK
p2=mLp24dJp24dJp24dJp24dJp24dJp24dJp24dJp24dJp24dJp2+[HpMFdIpMFdIpMFdIpMFdIpMFdI

~> def currentdict end
/Function exch def currentdict end sh
ep
end
%%Trailer
%%EOF
